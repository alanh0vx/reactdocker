name: Devsecops Demo

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16' 

    - name: Install dependencies
      run: | 
        cd client
        npm install

    - name: Run React tests for client
      run: |
        cd client
        npm test -- --watchAll=false

  codeql_analyze:
    name: Analyze
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: "auto" 
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  build_and_push:
    needs: codeql_analyze
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image (api)
        run: |
          cd api
          docker build -t alanh0/reactdocker_api:latest .
          docker push alanh0/reactdocker_api:latest 
          
      - name: Build and push Docker image (client)
        run: |
          cd client
          docker build -t alanh0/reactdocker_client:latest .
          docker push alanh0/reactdocker_client:latest 

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v2

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        GIT_USER: ${{ secrets.GIT_USER }}
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        # Save private key to a file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        # Transfer source code to EC2
        rsync -avz -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" ./ $USER@$HOST:/home/devsecops/reactdemo/reactdocker

        # SSH and deploy
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << EOF
          echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
          cd /home/devsecops/reactdemo/reactdocker
          git remote set-url origin https://$GIT_USER:$GIT_TOKEN@github.com/alanh0vx/reactdocker
          git pull origin main
          docker compose down
          docker compose up -d
          rm private_key.pem
        EOF
      shell: bash

  zapscan:
    needs: deploy
    runs-on: ubuntu-latest
    name: Scan the webapplication
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          token: ${{ secrets.GIT_CLASSIC_REPO }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://devsecops.vxrl.org/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
